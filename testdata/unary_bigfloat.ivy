# Copyright 2014 The Go Authors. All rights reserved.
# Use of this source code is governed by a BSD-style
# license that can be found in the LICENSE file.

# Unary operations on floats. The simplest but hacky way to get a float is to
# take a square root.

)format "%.16g"
sqrt 2
	1.414213562373095

)format "%.16g"
+sqrt 2
	1.414213562373095

)format "%.16g"
-sqrt 2
	-1.414213562373095

)format "%.16g"
/sqrt 2
	0.7071067811865475

)format "%.16g"
/-sqrt 2
	-0.7071067811865475

)format "%.8f"
sin (pi/4)*(1-iota 9)
	0.00000000 -0.70710678 -1.00000000 -0.70710678 0.00000000 0.70710678 1.00000000 0.70710678 0.00000000

)format "%.8f"
cos (pi/4)*(1-iota 9)
	1.00000000 0.70710678 0.00000000 -0.70710678 -1.00000000 -0.70710678 0.00000000 0.70710678 1.00000000

)format "%.8f"
tan 1 - iota 6
	0.00000000 -1.55740772 2.18503986 0.14254654 -1.15782128 3.38051501

)format "%.8f"
asin .2 * -6 + iota 11
	-1.57079633 -0.92729522 -0.64350111 -0.41151685 -0.20135792 0.00000000 0.20135792 0.41151685 0.64350111 0.92729522 1.57079633

)format "%.8f"
acos .2 * -6 + iota 11
	3.14159265 2.49809154 2.21429744 1.98231317 1.77215425 1.57079633 1.36943841 1.15927948 0.92729522 0.64350111 0.00000000

)format "%.8f"
atan -6 + iota 11
	-1.37340077 -1.32581766 -1.24904577 -1.10714872 -0.78539816 0.00000000 0.78539816 1.10714872 1.24904577 1.32581766 1.37340077

# Double-check atan values near 1, which use a different algorithm (see value/asin.go).
atan .9 .95 .99 1 1.01 1.05 1.1
	0.732815101787 0.759762754876 0.780373080067 0.785398163397 0.790373246728 0.80978357257 0.832981266674

sgn -sqrt 2
	-1

sgn sqrt 2
	1

)format "%.8f"
log iota 6
	0.00000000 0.69314718 1.09861229 1.38629436 1.60943791 1.79175947

log 1e1000
	2302.58509299

log 1e-1000
	-2302.58509299

)format "%.16g"
abs -sqrt 2
	1.414213562373095


)format "%.16g"
abs sqrt 2
	1.414213562373095

)format "%.16g"
floor -sqrt 2
	-2

)format "%.16g"
floor sqrt 2
	1

)format "%.16g"
ceil -sqrt 2
	-1

)format "%.16g"
ceil sqrt 2
	2

)format "%.16g"
rho sqrt 2
	

)format "%.16g"
,sqrt(2)
	1.414213562373095

# Results should be integers (the cutover is defined in BigFloat.shrink and is arbitrary).
sqrt 1e10 1e20 1e40 1e60
	100000 10000000000 100000000000000000000 1000000000000000000000000000000 

# Results should be floats.
sqrt 1e80 1e100
	1e+40 1e+50

# Results should always be floats.
sqrt 2e10 2e20 2e40 2e60
	141421.356237 14142135623.7 1.41421356237e+20 1.41421356237e+30

# Was a bug.
sqrt(0)
	0
